@startuml
class ElementID << (T,blue) primitive >>

class Package {
- id_: ElementID
- {static} assigned_IDs: std::set<ElementID>
- {static} freed_IDs: std::set<ElementID>
+ Package()
+ Package(const Package&)
+ Package(Package&& other)
+ get_id(): ElementID
+ ~Package()
}

enum PackageQueueType << enumeration >> {
FIFO
LIFO
}

class deqP_ci << (T,red) primitive >>

interface IPackageStockpile << interface >> {
+ {abstract} push(Package&& package): void
+ {abstract} cbegin(): deqP_ci
+ {abstract} cend(): deqP_ci
+ {abstract} begin(): deqP_ci
+ {abstract} end(): deqP_ci
+ {abstract} size(): std::size_t
+ {abstract} empty(): bool
+ {abstract} ~IPackageStockpile()
}

interface IPackageQueue << interface >> {
+ {abstract} get_queue_type(): PackageQueueType
+ {abstract} pop(): Package&&
+ {abstract} ~IPackageQueue()
}

class PackageQueue {
- storage_type_: PackageQueueType 
- plist: std::list<Package>
+ PackageQueue(PackageQueueType storage_type)
+ push(Package&& package): void
+ cbegin(): deqP_ci
+ cend(): deqP_ci
+ begin(): deqP_ci
+ end(): deqP_ci
+ size(): std::size_t
+ empty(): bool
+ get_queue_type(): PackageQueueType
+ pop(): Package&&
+ ~PackageQueue()
}

IPackageStockpile <|.. IPackageQueue
IPackageQueue <|.. PackageQueue
IPackageQueue ..> Package : << uses >>
PackageQueue ..> Package : << uses >>
@enduml